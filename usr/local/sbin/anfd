#!/usr/bin/perl -w
#
# anfd - application networking firewall daemon
#
# Authors: ostcar und otzenpunk und Martin Hecht (mrbaseman)
# URLs:    https://github.com/mrbaseman/anfd
#          http://wiki.UbuntuUsers.de/Skripte/anfd
# License: Gnu GPL Version 2 or higher
#
# Changelog:
#    26.9.2018: v2.1
#               allow "dummy" to be empty (for newer kernels
#               e.g. shipped with ubuntu 18.04)
#    1.9.2014:  v2.0
#		converted to nfqueue support for Kernels >= 3.5
#    26.2.2012:  v1.0
#		added "default rule", introduced variables
#		in input file, added regex matching, inverted
#		meaning of ip ranges in input file, added syslog
#    18.11.2006: v0.1
#                initial release

use strict;

use POSIX;
use Getopt::Std;
use nfqueue;
use Net::CIDR qw(:all);
use Net::RawIP;
use Sys::Syslog; 
use NetPacket::IP qw(IP_PROTO_TCP);
use NetPacket::TCP;
use Socket;
use Socket qw(AF_INET AF_INET6);
#use Privileges::Drop;

use constant VERSION =>"2.0";

my $q;



my @IP_PROTO ;
$IP_PROTO[0]='IP';       # Dummy protocol for IP
$IP_PROTO[1]='ICMP';			# Internet Control Message Protocol
$IP_PROTO[2]='IGMP';			# Internet Group Management Protocol
$IP_PROTO[4]='IPIP';			# IP in IP encapsulation
$IP_PROTO[6]='TCP';			# Transmission Control Protocol
$IP_PROTO[17]='UDP';			# User Datagram Protocol


my %opts;
my (%allow,%forbidden);
my (%use_cmdline);
my @expr;
my @ipt_command = qw(/sbin/iptables -I OUTPUT -m state --state NEW -j NFQUEUE --queue-num 0);
#my @ipt_command = qw(shorewall restart);

my $ipt_done;   # wichtig für cleanup
my $default_config = '/etc/anfd.conf';
my $pid_file = '/var/run/anfd.pid';

getopts('kph?Dxc:i:', \%opts);
$opts{'h'} || $opts{'?'} and usage();

$< and info("You must be root to use $0.",4);
$opts{'k'} and killUs();               # We'll never come back from there

sub cleanup() { #in dieser funktion kein info() verwenden, da es zu einer endlosschleife führen könnte
	print ("\tReceiving Term-Signal. Cleaning up.\n");
	print "unbind\n";
	$q->unbind(AF_INET);
	print "close\n";
	$q->close();
	if ($ipt_done) {
		#$ipt_command[1] = '-D';
		print("\tResetting iptables.\n");
		system(@ipt_command) == 0
			or print("\t\tWarning: iptables failed: $?\n");
	}
	if (-e $pid_file) {
		print("\tRemoving pid file.\n");
		unlink $pid_file or print("\t\tWarning: Can't remove pid file $pid_file.\n\n");
	}
	print("Exiting.\n");
	exit();
}
	
$SIG{INT}=$SIG{TERM}=$SIG{HUP}=\&cleanup;

$pid_file = $opts{'p'} if $opts{'p'};
@ipt_command = split " ", $opts{'i'} if $opts{'i'};

(-e $pid_file) && die("Pid-File already exists. Maybe another anfd running?\n");
$opts{D} ? info("Starte anfd v".VERSION,1) : print "Starte anfd v".VERSION."\n";

readConfigFile($opts{c} || $default_config) or
		info("Empty configuration file", $opts{D} ? 0 : 4);

unless ($opts{'x'}) {
	system('modprobe', 'nfnetlink_queue');
	system(@ipt_command) == 0
		or info("iptables failed: $?",4);
	$ipt_done = 1;
}

my($ipversion, $proto,$src_ip ,$dest_ip,$dest_port,$src_port,$proc,$cmdline);

# "Daemonisieren" - vom Terminal abkoppeln
# Perl-Kochbuch: (Seite 754ff)
unless ($opts{'D'}) {
	my $pid=fork;
	exit if $pid;
	info("Error: Can't fork(): $!",4)unless defined($pid);
	writePid();
	for my $handle (*STDIN, *STDOUT, *STDERR){
		open($handle, "+<", "/dev/null")
			or info("Could not redirect $handle to /dev/null: $!",4);
	}
	POSIX::setsid()
		or info("Could not start new session: $!",4);
}  else { writePid(); }


sub cb()
{
	my ($dummy,$payload) = @_;
	#drop_privileges('nobody');
	info("Packet arrived",1);
        if(!$payload){$payload=$dummy;$dummy=0;}
	info("dummy is $dummy",1) if $dummy;
	info("parse",1);
	($ipversion, $proto, $src_ip, $dest_ip, $src_port, $dest_port)=ripPayload($payload->get_data()) if $payload->get_length();
	$proto=$IP_PROTO[$proto] || 'Unknown';

	info("IP-Version: $ipversion");
	info("Protocol: $proto");
	info("Dest-IP: $dest_ip");
	info("Dest-Port: $dest_port");
	if ($ipversion == 4) {
		if ($proto eq 'TCP' || $proto eq 'UDP') {
			($proc,$cmdline)=getProcName($src_port,$proto);
			if ($proc) {
				info ("Path: $proc");
				info ("cmdLine: $cmdline");
				info ("",2);
				info ("checking rules...",1);
				if(canPass($proc,$cmdline,$dest_ip,$dest_port)){
					info ("can pass");					
					$payload->set_verdict($nfqueue::NF_ACCEPT);
				} else {
					info("can not pass");
					sendReject($payload,$src_ip);
					$payload->set_verdict($nfqueue::NF_DROP);
					openlog "anfd", "nofatal", "LOG_SYSLOG";
					my $dest_name = gethostbyaddr(inet_aton($dest_ip), AF_INET);
					my $msg = "deny for $cmdline ($proc) connect to $dest_ip($dest_name):$dest_port";
					$msg =~ s/\0//g;
    					syslog "WARNING", $msg . "\0";
					closelog;

				}
				info("",2);
				info("Done",2);
				return();
			} else {        # no process id
				info("can not spy out the name",3);
			}
		} else {        # no tcp/udp
			info("$proto not supported with anfd v".VERSION,3);
		}
	} else {        # IPv6 et al.
		info("IPv$ipversion not supported with anfd v".VERSION,3);
	}
	info("",3);     # accept evt. unknown so wont break anything
	$payload->set_verdict($nfqueue::NF_ACCEPT);

}


$q = new nfqueue::queue();

$SIG{INT} = "cleanup";

info("setting callback");
$q->set_callback(\&cb);

info("open");
$q->fast_open(0, AF_INET);

$q->set_queue_maxlen(5000);

info("trying to run");
$q->try_run();



#function zu einladen der conf datei
sub readConfigFile { 			# readconfigfile($configfile)
	my $file = shift;
	my $inuse;
	my %usrvar;
	info("Load config file",1);
	open(CF,"$file") 
		or info("Warning: can not open $file",4);
	my $firstline = <CF>;
	if($firstline !~ /^# anfd version [1-9]\.[0-9].*/){ 
            info("Warning: $file seems to be an old version.");
	    info("          Note that the syntax has changed between v0.1 and v1.0!");
	}
	while(<CF>){
		my($proc, @ip, @allow, @forbidden);
		next if /^\s*(?:$|#)/;		# Bei leerer Zeile gar nicht erst weiter umwandeln
		s/\s*#.*//;								# Löscht von # bis Zeilenende
		if(/=/){
			my($var, $cont);
			($var, $cont)=split("=");
			$cont=~s/\n//;
			$usrvar{$var} = $cont; 
			info("\$$var = $cont"); 
			next 
		}
		while(/\$([^\s:,]+)/){
			my $var=$1;
			s/\$$var/$usrvar{$var}/;
		}
		($proc, @ip)=split();			#alle wörter der Zeile durch whitespaces trennen

		info("Config error: $_", 4) if !defined($ip[0]); # fehler, wenn nicht beide argumente vorhanden sind

		$proc =~ s/^\^// && ( $use_cmdline{$proc} = 1 ); # bei ^ am anfang cmdline benutzen
		$proc =~ s/^\&// && push @expr, $proc; # bei & am Anfang folgt regex
		if(defined($forbidden{$proc})){@forbidden=@{$forbidden{$proc}}}
		if(defined($allow{$proc})){@allow=@{$allow{$proc}}}
		for (@ip) {
			my @ipranges; my @h; my $p = "";
			( $_ =~  /^([*a-zA-Z0-9.\/-]+):([0-9,-]+)$/) ? (($_,$p) = ($1,":$2")) : ($p=":0-65536");
			if (/^\*$/) {  
                                info("$proc can pass by default on port $p");
                                push @allow, "0.0.0.0/0$p";
                                $inuse=1;
                        } elsif (s/^!//) {
				info("$proc can not pass to $_ on port $p");
				if( $_ =~  /^([*0-9.\/-]+)$/) {
					@ipranges = ((@h = validIPs($_)) ? range2cidr(@h) : ()) or info("Config error: $_", 4);
					for(@ipranges){ $_.=$p}
					push @forbidden, @ipranges;
				} else { 
					$_="^$_\$";
					$_ =~s/\./\\\./g;
					$_ =~s/\*/.*/g;
					push @forbidden, $_; 
				}
				$inuse=1;
			} elsif (/^!\*$/) {
				info("$proc can not pass by default on port $p");
				push @forbidden, "0.0.0.0/0$p";
				$inuse=1;
			} else {
				info("$proc can pass to $_ on port $p");
				if ( $_ =~  /^([*0-9.\/-]+)$/) {
					@ipranges = ((@h = validIPs($_)) ? range2cidr(@h) : ()) or info("Config error: $_", 4);
					for(@ipranges){ $_.=$p}
					push @allow, @ipranges;
				} else { 
					$_="^$_\$";
					$_ =~s/\./\\\./g;
					$_ =~s/\*/.*/g;
					push @allow, $_ ; 
				}
				$inuse=1;
			}
		}
		$forbidden{$proc}=\@forbidden;
		$allow{$proc}=\@allow;
	}
	info("Done",2);
	return $inuse;
}

sub validIPs {
	for (@_) {
		next if cidrvalidate($_);
		if ( /^([0-9.]+)\/([0-9]+)$/ ) {
			next if cidrvalidate($1) && $2 <= 32;
		}
		if ( /^([0-9.]+)-([0-9.]+)$/ ) {
			next if cidrvalidate($1) && cidrvalidate($2);
		}
		return 0;  # wenn es in kein Schema passt, ist es falsch, IPv6 fehlt noch
	}
	return (@_);   # wenn wir hier ankommen, ist alles in Ordnung
}

#function zum Regel abgleichen
sub canPass{				# $bool = can_pass($programmname, $cmdline, $ipadresse, $dest_port)
										# return 1: kann passieren
										# return 0: blockieren
	my $proc=shift;
	my $cmdline=shift;
	my $ip=shift;
	my $port=shift;
	
	my(@forbidden,@allow,@cmd);
	#alle argumente überprüfen, und auch des program ohne pfad
	@cmd=split('\0',$cmdline);
	for (@cmd){
		if(defined($use_cmdline{$_})||defined($forbidden{$_})||defined($allow{$_})){
			@forbidden=@{$forbidden{$_}};
			@allow=@{$allow{$_}};
		}
	}
	
	@forbidden=@{$forbidden{$proc}} if(defined($forbidden{$proc}));
	@allow=@{$allow{$proc}} if(defined($allow{$proc}));
	# MH: Anwendung wurde nicht im cfg gefunden
	if(!defined($forbidden{$proc}) && !defined($allow{$proc})){
                for(@expr){
			my $expr=$_;
			if($proc =~ m{$expr}){
				info("$proc matches $expr");
	                        @forbidden=@{$forbidden{$expr}};
        	                @allow=@{$allow{$expr}};
				$proc=$expr;
			}
                }
	}
        if(!defined($forbidden{$proc}) && !defined($allow{$proc})){
                if(defined($forbidden{'*'})||defined($allow{'*'})){
                        @forbidden=@{$forbidden{'*'}};
                        @allow=@{$allow{'*'}};
                }
        }
	my %forbidden; my %allow;
	if(@forbidden){
		info("checking forbidden");
		for(@forbidden){ ( $_ =~  /^([*a-zA-Z0-9.\/-]+):([0-9,-]+)$/) ? ($forbidden{$1}.=",$2") : ($forbidden{$_}="0-65536") }
		for(keys(%forbidden)){
			if (!( $_ =~  /^([*0-9.\/]+)$/)){
				my $dest_name = gethostbyaddr(inet_aton($ip), AF_INET);
				if($dest_name =~ "$_"){
					info("checking for $dest_name matching $_ portmatches($port,($forbidden{$_}))");
					if(portmatches($port,$forbidden{$_})){return 0}
				}
			} else {
				if(cidrlookup($ip,$_)){
					info("checking portmatches($port,($forbidden{$_}))");
					if(portmatches($port,$forbidden{$_})){return 0}
				}
			}
		}
	}
	if(@allow){
		info("checking allow");
		for(@allow){ ( $_ =~  /^([*a-zA-Z0-9.\/-]+):([0-9,-]+)$/) ? ($allow{$1}.=",$2") : ($allow{$_}="0-65536") }
		for(keys(%allow)){
			if (!( $_ =~  /^([*0-9.\/]+)$/)){
				my $dest_name = gethostbyaddr(inet_aton($ip), AF_INET);
				if($dest_name =~ "$_"){
					info("checking for $dest_name matching $_ portmatches($port,($allow{$_}))");
					if(portmatches($port,$allow{$_})){return 1}
				}
			} else {
				if(cidrlookup($ip,$_)){
					info("checking portmatches($port,($allow{$_}))");
					if(portmatches($port,$allow{$_})){return 1}
				}
			}
		}
	}
	info("none applied");
	return 0;
}

sub portmatches{			# $matches = portmatches($port,$range)
	my $port = shift;
	my $ranges = shift;
	my @ranges = split(',',$ranges);
	for(@ranges){
	  my $range=$_;
	  if($range ne ""){
	    if($range =~ /^[0-9]+$/){ $range = "$range-$range" }
	    $range =~ /([0-9]+)-([0-9]+)/;
	    if($1 <= $port && $port <= $2){ return 1}	
	  }
	}
	return 0;
}	


#nimmt einen quellport und gibt die inode zurück bzw 0 für fehler
sub srcPort2inode{ 			# $inode = quellporttoinode($quellport,$protocol)
												# Fehler: return 0;
	my $src_port=shift;
	my $protocol=lc(shift);
	open(FILE, "/proc/net/$protocol") 
		or return 0;
	while(<FILE>) {
		my @cline=split;
		next if ($cline[9]=~/uid/);
		my $port = hex((split(":",$cline[1]))[1]);
		if($port==$src_port){
			close(FILE);
			return $cline[9];
		}
	}
	close(FILE);
	return 0;
}

#nimmt eine inode und gibt eine prog nr zurück
sub inode2procNr{ 				# $procnr = inodetoprocnr($inode);
													# bei Fehler: return 0;
	my $inode=shift;
	return 0 unless $inode;
	my($proc,$ports,$dev,$ino,$link);
	opendir (PROC, "/proc") 
		or return 0;
	for $proc (readdir(PROC)) {              # Infos zu jedem laufenden Programm liefert /proc
	                                         # Wir müssen alle testen, bis eins passt.
		next if(!($proc=~/[0-9]+/) );          # Nach PIDs suchen.
		if(!opendir(PORTS,"/proc/$proc/fd")) { # fd-Ordner öffnen
			closedir PORTS;
			next;                                # nächstes Programm, wenn Öffnen fehlschlägt
		}
		for $ports (readdir(PORTS)) { #in jedem laufenden program die geöffneten dateien durchsuchen
			next if(!($ports=~/[0-9]+/)); #muss zahlen beinhalten
			$link=readlink("/proc/$proc/fd/$ports"); #zu der datei gehn, auf welches die nummer zeigt
			($dev,$ino)=($link=~/^(socket|\[[0-9a-fA-F]*\]):\[?([0-9]*)\]?$/);
			if(defined($ino)&& defined($dev) && $ino==$inode && ($dev eq "[0000]" || $dev eq "socket")){
				closedir PORTS;
				closedir PROC;
				return $proc;
			}
		}
		closedir PORTS;
	}
	closedir PROC;
	return 0;
}

#nimmt einen srcPort und gibt den programnamen und die cmdline aus
sub getProcName{									# ($pfad, $cmdline) = getprocname($quellport,$protocol);
					 												# Fehler: return 0;
	my $procnr=inode2procNr(srcPort2inode(@_));
	
	return 0 unless $procnr;
	my($pfad,$cmdline,@cmdline);
	$pfad=readlink("/proc/$procnr/exe");
	open(CMDLINE,"/proc/$procnr/cmdline") or return 0;
	$cmdline=<CMDLINE>;
	@cmdline=split(" ",$cmdline);
	$cmdline[0]=~s/^\/.*\///;
	$cmdline=join(" ",@cmdline);
	close(CMDLINE);
	return $pfad, $cmdline;
}

# Nimmt ein TCP/IP-Packet und liefert IP-Version (norm. 4), Protokoll (TCP/UDP als Nummer) IPs und Ports zurück
sub ripPayload {
   my $payload = shift;

   my ($version, $proto, $src_ip, $dest_ip, $src_port, $dest_port);
   my (@src_ip, @dest_ip);
                                         # IP-Header auseinanderpflücken:
	($version, undef, $proto, undef, @src_ip[0..3], @dest_ip[0..3], $src_port, $dest_port) =
     unpack("C1a8C1a2C8n1n1", $payload);

	$version >>= 4;                             # IPv steht in linken vier Bits
   $src_ip = join ".", @src_ip;
   $dest_ip = join ".", @dest_ip;

   return ($version, $proto, $src_ip, $dest_ip, $src_port, $dest_port);
}

# IP_QUEUE kennt nur ACCEPT und DROP. Deswegen konstruieren wir unser eigenes Reject-Paket
sub sendReject {
	my $payload = unpack("a28", shift);   # Anfang des Originalpakets wird in ICMP verpackt
	my $ip = shift;
	Net::RawIP->new({ip => {saddr => $ip, daddr => $ip},
									icmp => {type => 3, code => 0, data => $payload}
									})->send();                             # network unreachable
}
INIT {
	my $ebene = 0;
	sub info {
		my $info = shift;
		my $command = shift || 0;
		unless ($opts{D}) {
			if ($command == 4) {
				print "$info\n";
				cleanup();
			}
			return;
		}
		if ($command==1){ #neue ebene
			print "\t" x $ebene.$info.": \n";
			$ebene++;
		}elsif ($command==2){ #ebene runter
			$ebene--;
			print "\t" x $ebene  .$info."\n" if $info;
		}elsif($command==3){ #ebene runter mit fehler
			$ebene--;
			print "\t" x $ebene."Error".($info?": $info":"")."\n";
		}elsif($command==4){ #alle ebenen runter mit fehler und ende
			$ebene--;
			for(;$ebene>0;$ebene--){
				print "\t" x $ebene."Critical Error".($info?": $info":"")."\n";
			}
			cleanup();
		}else{
			print "\t" x $ebene.$info."\n"
		}
	}
}

sub usage {
	my $ipt = join " ", @ipt_command;
	print <<EOT;
$0 - Ain't no firewall daemon.

anfd [-D] [-i 'iptables command'] [-x] [-c configfile] [-p pidfile]
anfd -k [-p pidfile]
anfd (-h|-?)

Anfd is a userspace daemon that uses the netfilter-nfqueue mechanism to restrict
network access depending on the specific application

Options:
	-h, -?      : Print this help message.
	-D          : Debug mode - don't detach from terminal and print detailed infos
	-i 'command': Use this iptables command to insert the QUEUE rule.
	              Default: $ipt
	-x          : Dont insert any iptables rule. Admin will take care of that
	              herself.
	-c file     : Use this config file. Default: $default_config
	-p pidfile  : Use this pid file. Default: $pid_file
	-k          : Kill running anfd process.
EOT
	exit 1;
}

sub killUs {
	open PID, "< $pid_file"
		or die("Can't open pid file. Either there is no running anfd process or you'll have to kill running anfd processes yourself.\n");
	my $pid = <PID>; close PID;
	($pid) = split '\D+', $pid;
	$pid or die("No pid found in $pid_file. You'll have to kill running anfd processes yourself.\n");
	unless (kill 'TERM', $pid) {
		print("No process $pid.  You'll have to kill running anfd processes yourself.\n");
		unlink $pid_file or print "Can't delete $pid_file.\n";
	}
	print("Killed anfd.\n");
	exit;
}

sub writePid {
	if (-e $pid_file) {
		info("There seems to be another anfd process running. Use anfd -k to get rid of it.",4);
	} else {
		open PID, "> $pid_file" or info("Can not write pid file.\n",4);
		print PID $$; close PID;
	}
}
